local UIManager = {}

local UserInputService = game:GetService("UserInputService")

-- Helper: create rounded frame
local function createRoundedFrame(parent, size, position, bgColor)
    local frame = Instance.new("Frame")
    frame.Size = size
    frame.Position = position
    frame.BackgroundColor3 = bgColor
    frame.BorderSizePixel = 0
    frame.Parent = parent

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = frame

    return frame
end

-- Helper: create label
local function createLabel(parent, text, size)
    local label = Instance.new("TextLabel")
    label.Size = size or UDim2.new(1, 0, 0, 24)
    label.BackgroundTransparency = 1
    label.Font = Enum.Font.GothamSemibold
    label.TextColor3 = Color3.fromRGB(230, 230, 230)
    label.TextSize = 18
    label.Text = text
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = parent
    return label
end

-- Helper: create button
local function createButton(parent, text, callback)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(1, 0, 0, 35)
    btn.BackgroundColor3 = Color3.fromRGB(50, 50, 70)
    btn.BorderSizePixel = 0
    btn.Text = text
    btn.TextColor3 = Color3.new(1, 1, 1)
    btn.Font = Enum.Font.Gotham
    btn.TextSize = 18

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = btn

    btn.MouseEnter:Connect(function()
        btn.BackgroundColor3 = Color3.fromRGB(70, 70, 90)
    end)
    btn.MouseLeave:Connect(function()
        btn.BackgroundColor3 = Color3.fromRGB(50, 50, 70)
    end)

    btn.MouseButton1Click:Connect(function()
        if callback then
            callback()
        end
    end)

    btn.Parent = parent
    return btn
end

-- Helper: create slider
local function createSlider(parent, name, min, max, default, callback)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, 0, 0, 60)
    container.BackgroundTransparency = 1
    container.Parent = parent

    local label = createLabel(container, name .. ": " .. tostring(default), UDim2.new(1, 0, 0, 24))

    local bar = Instance.new("Frame")
    bar.Size = UDim2.new(1, 0, 0, 20)
    bar.Position = UDim2.new(0, 0, 0, 32)
    bar.BackgroundColor3 = Color3.fromRGB(65, 65, 85)
    bar.BorderSizePixel = 0
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 10)
    corner.Parent = bar
    bar.Parent = container

    local fill = Instance.new("Frame")
    fill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
    fill.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
    fill.BorderSizePixel = 0
    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(0, 10)
    fillCorner.Parent = fill
    fill.Parent = bar

    local dragging = false

    local function updateSlider(xPos)
        local relative = (xPos - bar.AbsolutePosition.X) / bar.AbsoluteSize.X
        relative = math.clamp(relative, 0, 1)
        fill.Size = UDim2.new(relative, 0, 1, 0)
        local value = math.floor(min + (max - min) * relative)
        label.Text = name .. ": " .. tostring(value)
        if callback then callback(value) end
    end

    bar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            updateSlider(input.Position.X)
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateSlider(input.Position.X)
        end
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    return container
end

-- Helper: create textbox
local function createTextbox(parent, placeholder, callback)
    local tb = Instance.new("TextBox")
    tb.Size = UDim2.new(1, 0, 0, 32)
    tb.BackgroundColor3 = Color3.fromRGB(55, 55, 75)
    tb.BorderSizePixel = 0
    tb.TextColor3 = Color3.fromRGB(230, 230, 230)
    tb.PlaceholderText = placeholder or ""
    tb.Font = Enum.Font.Gotham
    tb.TextSize = 18
    tb.ClearTextOnFocus = false
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = tb

    tb.Parent = parent

    if callback then
        tb:GetPropertyChangedSignal("Text"):Connect(function()
            callback(tb.Text)
        end)
    end

    return tb
end

function UIManager.CreateWindow(title, parent)
    -- fallback if no parent provided
    if not parent then
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        if player then
            parent = player:FindFirstChild("PlayerGui")
        end
    end

    assert(parent, "[UIManager] CreateWindow: parent UI container required!")

    title = title or "ðŸ”« Scouse Power"

    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "ScousePowerWindow"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = parent

    local mainFrame = createRoundedFrame(screenGui, UDim2.new(0, 600, 0, 450), UDim2.new(0.5, -300, 0.5, -225), Color3.fromRGB(20, 20, 25))

    -- Sidebar for navigation buttons (about an inch wide)
    local sidebar = createRoundedFrame(mainFrame, UDim2.new(0, 110, 1, 0), UDim2.new(0, 0, 0, 0), Color3.fromRGB(30, 30, 40))

    -- Container for pages on the right side
    local contentFrame = createRoundedFrame(mainFrame, UDim2.new(1, -120, 1, -40), UDim2.new(0, 115, 0, 35), Color3.fromRGB(25, 25, 30))

    -- Title bar on top (above contentFrame, right side of sidebar)
    local titleBar = createRoundedFrame(mainFrame, UDim2.new(1, -120, 0, 35), UDim2.new(0, 115, 0, 0), Color3.fromRGB(35, 35, 45))
    titleBar.ClipsDescendants = true

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, -64, 1, 0)
    titleLabel.Position = UDim2.new(0, 10, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextSize = 22
    titleLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = titleBar

    local minimizeButton = Instance.new("TextButton")
    minimizeButton.Size = UDim2.new(0, 28, 0, 28)
    minimizeButton.Position = UDim2.new(1, -64, 0, 3)
    minimizeButton.BackgroundColor3 = Color3.fromRGB(50, 50, 70)
    minimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    minimizeButton.Font = Enum.Font.GothamBold
    minimizeButton.TextSize = 20
    minimizeButton.Text = "-"
    minimizeButton.BorderSizePixel = 0
    minimizeButton.Parent = titleBar

    local miniCorner = Instance.new("UICorner")
    miniCorner.CornerRadius = UDim.new(0, 5)
    miniCorner.Parent = minimizeButton

    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0, 28, 0, 28)
    closeButton.Position = UDim2.new(1, -32, 0, 3)
    closeButton.BackgroundColor3 = Color3.fromRGB(180, 50, 50)
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.Font = Enum.Font.GothamBold
    closeButton.TextSize = 20
    closeButton.Text = "X"
    closeButton.BorderSizePixel = 0
    closeButton.Parent = titleBar

    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0, 5)
    closeCorner.Parent = closeButton

    closeButton.MouseEnter:Connect(function()
        closeButton.BackgroundColor3 = Color3.fromRGB(255, 70, 70)
    end)
    closeButton.MouseLeave:Connect(function()
        closeButton.BackgroundColor3 = Color3.fromRGB(180, 50, 50)
    end)

    closeButton.MouseButton1Click:Connect(function()
        screenGui:Destroy()
    end)

    local minimized = false

    minimizeButton.MouseButton1Click:Connect(function()
        minimized = not minimized
        if minimized then
            contentFrame.Visible = false
            titleBar.Visible = false
            sidebar.Visible = false
            mainFrame.Size = UDim2.new(0, 110, 0, 100)
            mainFrame.Position = UDim2.new(0.5, -55, 0.5, -50)
        else
            contentFrame.Visible = true
            titleBar.Visible = true
            sidebar.Visible = true
            mainFrame.Size = UDim2.new(0, 600, 0, 450)
            mainFrame.Position = UDim2.new(0.5, -300, 0.5, -225)
        end
    end)

    -- Draggable Logic
    local dragging = false
    local dragInput, dragStart, startPos

    local function update(input)
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)

    -- Sidebar navigation buttons container and pages container logic
    local pages = {}
    local currentPage = nil

    local function showPage(name)
        if currentPage then
            currentPage.Visible = false
        end
        currentPage = pages[name]
        if currentPage then
            currentPage.Visible = true
        end
    end

    -- API for adding pages and sidebar buttons
    local window = {
        AddPage = function(_, name)
            local page = Instance.new("Frame")
            page.Size = UDim2.new(1, 0, 1, 0)
            page.BackgroundTransparency = 1
            page.Visible = false
            page.Parent = contentFrame

            pages[name] = page

            -- Create sidebar button
            createButton(sidebar, name, function()
                showPage(name)
            end)

            -- Show first added page automatically
            if not currentPage then
                showPage(name)
            end

            return page
        end,

        AddButton = function(_, text, callback)
            return createButton(contentFrame, text, callback)
        end,

        AddSlider = function(_, name, min, max, default, callback)
            return createSlider(contentFrame, name, min, max, default, callback)
        end,

        AddTextbox = function(_, placeholder, callback)
            return createTextbox(contentFrame, placeholder, callback)
        end
    }

    return window
end

return UIManager
